server {
    server_name  sensorgnome.org;

    # reverse proxy to hugo server for normal HTTP
    # Note: hugo server is run like this:
    #  sudo su -c 'hugo server --liveReloadPort=443 --port=1313 --baseUrl=sensorgnome.org --appendPort=false' sg_remote

    location / {
        proxy_pass http://sgs-hugo:1313/;
    }

    # reverse proxy to hugo server for websockets, used by livereload
    location /livereload {
	proxy_pass http://sgs-hugo:1313/livereload;
	proxy_read_timeout 86400;
	proxy_http_version 1.1;
	proxy_set_header Upgrade $http_upgrade;
	proxy_set_header Connection "Upgrade";

        # Next line needed so Hugo's livereload code doesn't fail
        # on upgrading the connection for websockets.
        # See around line 57 of https://github.com/gohugoio/hugo/blob/master/livereload/livereload.go
        # where a zero-length Origin is accepted.  It should equally be possible
        # to set hugo server's host name to match "new.sensorgnome.org" but the way
        # I tried (by specifying baseURL to hugo server) doesn't work.
	proxy_set_header Origin "";
    }

    listen 443 ssl;
    ssl_certificate /etc/ssl/public/STAR_sensorgnome_org.crt;
    ssl_certificate_key /etc/ssl/private/STAR_sensorgnome_org.key;
    include /etc/nginx/ssl.conf;
    #blocks blank user_agents
    if ($http_user_agent = "") { return  301 $scheme://www.duckduckgo.com/; }

    if ($limit_bots = 1) {
    return  301 $scheme://www.duckduckgo.com/;
    }

}
server {
    # archived static wiki pages from old server
    server_name archived.sensorgnome.org;
    location / {
       root /srv/http/archived_sensorgnome_org;
       default_type text/html;
    }
    listen 443 ssl;
    ssl_certificate /etc/ssl/public/STAR_sensorgnome_org.crt;
    ssl_certificate_key /etc/ssl/private/STAR_sensorgnome_org.key;
    include /etc/nginx/ssl.conf;
#blocks blank user_agents
    if ($http_user_agent = "") { return  301 $scheme://www.duckduckgo.com/; }

    if ($limit_bots = 1) {
       return  301 $scheme://www.duckduckgo.com/;
  }
}

server {
    # public files; e.g. software images
    server_name public.sensorgnome.org;
    location / {
       root /srv/http/public_sensorgnome_org;
       default_type text/html;
       autoindex on;
    }
    listen 443 ssl;
    ssl_certificate /etc/ssl/public/STAR_sensorgnome_org.crt;
    ssl_certificate_key /etc/ssl/private/STAR_sensorgnome_org.key;
    include /etc/nginx/ssl.conf;
#blocks blank user_agents
    if ($http_user_agent = "") { return  301 $scheme://www.duckduckgo.com/; }

    if ($limit_bots = 1) {
      return  301 $scheme://www.duckduckgo.com/;
    }
}

server {
    # direct connections to sensorgnomes
    server_name "~^(?<serno>SG-[a-z0-9]{12}).sensorgnome.org";
    location / {
        rewrite    /(.*)$ /$serno/$1 break;
        proxy_pass http://127.0.0.1:59027;
        proxy_buffering off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    listen 443 ssl;
    ssl_certificate /etc/ssl/public/STAR_sensorgnome_org.crt;
    ssl_certificate_key /etc/ssl/private/STAR_sensorgnome_org.key;
    include /etc/nginx/ssl.conf;
#blocks blank user_agents
    if ($http_user_agent = "") { return  301 $scheme://www.duckduckgo.com/; }

    if ($limit_bots = 1) {
        return  301 $scheme://www.duckduckgo.com/;
    }
}


server {
   server_name  "~.*sensorgnome.org";
   listen 80;
 #blocks blank user_agents
  if ($http_user_agent = "") { return  301 $scheme://www.duckduckgo.com/; }

  if ($limit_bots = 1) {
     return  301 $scheme://www.duckduckgo.com/;
  }
  return 301 https://$host$request_uri;
  # managed by Certbot
}

server {
    server_name  new.sensorgnome.org;

    return 301 https://sensorgnome.org$request_uri;
    listen 443 ssl;
    ssl_certificate /etc/ssl/public/STAR_sensorgnome_org.crt;
    ssl_certificate_key /etc/ssl/private/STAR_sensorgnome_org.key;
    include /etc/nginx/ssl.conf;
    #blocks blank user_agents
    if ($http_user_agent = "") { return  301 $scheme://www.duckduckgo.com/; }

    if ($limit_bots = 1) {
    return  301 $scheme://www.duckduckgo.com/;
    }
}
